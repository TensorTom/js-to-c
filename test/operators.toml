["numeric comparison"]

example = """
console.log(10>5);
console.log(10>=10);
console.log(5<7);
console.log(5<=7);
"""

output="true\ntrue\ntrue\ntrue"

["unary not - true"]
example="console.log(!true)"
output="false"

["unary not - false"]
example="console.log(!false)"
output="true"

["unary not - empty string"]
example="console.log(!'')"
output="true"

["unary not - double on false"]
example="console.log(!!false)"
output="false"

["unary not - double on true"]
example="console.log(!!true)"
output="true"

["unary not - false expression"]
example="console.log(!(1 > 2))"
output="true"

["strict equal numbers"]

example = """
console.log(10===10);
console.log(!(10==='10'));
console.log(!(10===10.001));
"""

output="true\ntrue\ntrue"

["logical and - values"]

example = """
function getEmpty() {
    return ""
}
function getOk() {
    return "ok"
}

console.log(false && 'rhs');
console.log(true && 'rhs');
console.log(getEmpty() && 'rhs');
console.log(false && 'rhs');
console.log('lhs' && 'rhs');
console.log(0 && 'rhs');
"""

output="false\nrhs\n\nfalse\nrhs\n0"

["logical and - short circuiting"]

example = """
function boom() {
  throw new Error("Should not have been evaluated");
}

false && boom()
0 && boom()
console.log("ok");
"""

output="ok"

["logical and - in return position"]

example = """
function one() {
    function getFalsy() { return 0 }
    function boom() {
      throw new Error("Should not have been evaluated");
    }
    return getFalsy() && boom();
}
console.log(one());
"""

output="0"

["ternary"]

example = """
function boom() {
  throw new Error("Should not have been evaluated");
}
function one() {
    function getFalsy() { return 0 }
    return getFalsy() ? boom() : "ok"
}
function two() {
    function getTruthy() { return true }
    return getTruthy() ? "ok" : boom()
}
console.log(one());
console.log(two());
console.log(10 > 15 ? "fail" : "ok");
"""

output="ok\nok\nok"
